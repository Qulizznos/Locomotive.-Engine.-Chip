@name L.E.C Locomotive Engine Chip
@persist [CHIP]:entity
#[
    Hello and Welcome to L.E.C!
    This E2 was Made for Locomotives
    E2 was Based off REPLC created by Tylar.
    E2 was Created by Qulizznos
    
    GITHUB LINK IS AT: https://github.com/Qulizznos/Locomotive.-Engine.-Chip.
    
    THE CONFIG AREA IS BETWEEN 96-136
    
    Guide to Setting up E2
    Wire Locomotive_Body FrontBogie RearBogie to each part of the locomotive
    Wire Active to Pod Controllers Active
    Wire Pod_Key_Reverser Forward to W  and Reverser_Backwards to S
    Wire ThrottleUp to A and ThrottleDown to D
    Wire Handbrake to Space
    Wire Button_EngineStartShutdown to a Button
    
]#
#-----------------------------------------------------------------------------------------------#
#                               INPUTS                                                          #
#-----------------------------------------------------------------------------------------------#
#Entities
@inputs [Locomotive_Body  FrontBogie RearBogie]:entity
#Pod Inputs
@inputs [Active Pod_Key_Reverser_Forward Pod_Key_Reverser_Backwards Pod_Key_ThrottleUp Pod_Key_ThrottleDown Pod_Key_Handbrake]:number
#Button Inputs
@inputs [Button_EngineStartShutdown Button_ControlIsolation Button_HighIdle]
#-----------------------------------------------------------------------------------------------#
#                               OUTPUTS                                                         #
#-----------------------------------------------------------------------------------------------#
@outputs [Chip_CPUusage Chip_E2Ops Chip_EngineStatus HighIdling]:number
@outputs [Throttle Reverser Notch NotchXThrottle Handbrake]:number
@outputs [E2_Downforce E2_DownforceMax]:number
@outputs [MPH MPH_MAX KPH KPH_MAX UPS UPS_MAX]:number

#-----------------------------------------------------------------------------------------------#
#                               TRIGGERS                                                        #
#-----------------------------------------------------------------------------------------------#
@trigger Active Pod_Key_Handbrake Pod_Key_Reverser_Forward Pod_Key_Reverser_Backwards Button_EngineStartShutdown FrontBogie RearBogie Button_HighIdle
#-----------------------------------------------------------------------------------------------#
#                               PERSISTS                                                        #
#-----------------------------------------------------------------------------------------------#
            #-----------------------------------------------------#
            #                   SETTINGS                          #
            #-----------------------------------------------------#
@persist [Dual_Engines Idle_Toggle NotchLimit WheelNoises]:number
@persist [Downforce_Toggle Downforce_Max Downforce_Split]:number
@persist [Downforce_SpeedMin Downforce_SpeedMax]:number
@persist [Downforce_Apply]:string
@persist [SoundDSP_Enable SoundDSP_DistantLevel SoundDSP_DistantDSP]:number
@persist [Sound_EngineLevel Sound_Toggle_HighIdle]:number
@persist [Sound_EngineSoundPath Sound_SoundHandbrakeOn Sound_SoundHandbrakeOff Sound_PrimeOn Sound_PrimeOff]:string
@persist [Enginepath_Start Enginepath_ShutdownHigh Enginepath_ShutdownLow IdleToNotch1 Notch1ToIdle Engine_TractionMotors]:string
            #-----------------------------------------------------#
            #                   KERNEL                            #
            #-----------------------------------------------------#
@persist [Kernel_E2_Interval Kernel_Bogie]:number
@persist [Kernel_NotchThresholds]:array
@persist [Kernel_Multiplier Kernel_MaxSpeed]:number
@persist [Kernel_UnitScale]:string
@persist [Kernel_DeadZoneSize Kernel_ThrottlingUp]:number
@persist [Kernel_Force Kernel_Physprop_Brake Kernel_PhysProp_NoBrake]:string
@persist [ThrottleYes SpeedYes]:number
            #-----------------------------------------------------#
            #                   BSD_ROOT                          #
            #-----------------------------------------------------#
@persist [BSD_Locomotive]:entity
@persist [BSD_EngineProcedures BSD_PermaActive BSD_HighIdleMin BSD_HighIdleMax]:number
@persist [BSD_EntityCache BSD_EngineStatus BSD_EngineHighIdle BSD_ReverserCache]:number
@persist [BSD_Notch BSD_ReturnReceive BSD_Reverser BSD_ScaleSpeed BSD_Throttle BSD_ThrottleForgive]:number
@persist [BSD_FrontBogey_Physprop BSD_RearBogey_Physprop]:string
@persist [Version]:string
            #-----------------------------------------------------#
            #                   SOUND                             #
            #-----------------------------------------------------#
@persist [SND_FRONT_BOGEY SND_REAR_BOGEY SND_ENGINE_HOLO]:number
@persist [SND_SOUND_ENGINE SND_SOUND_DISTANT_ENGINE]:number
@persist [SND_HANDBRAKE_FRONT SND_HANDBRAKE_REAR SND_REVERSER]:number
@persist [SND_ENT_ENGINE]:entity
            #-----------------------------------------------------#
            #                   OUTPUTS                           #
            #-----------------------------------------------------#
@persist [Chip_CPUusage Chip_E2Ops Chip_EngineStatus HighIdling]:number
@persist [Throttle Reverser Notch NotchXThrottle Handbrake]:number
@persist [E2_Downforce E2_DownforceMax]:number
@persist [MPH MPH_MAX KPH KPH_MAX UPS UPS_MAX]:number
#-----------------------------------------------------------------------------------------------#
#                               MODEL                                                           #
#-----------------------------------------------------------------------------------------------#
@model models/sprops/misc/alphanum/alphanum_arrow_a.mdl
#######################################################################################################################################################
Version = "3.5.0"

#-----------------------------------------------------------------------------------------------#
#                               CONFIG AREA                                                     #
#-----------------------------------------------------------------------------------------------#

if (first() | dupefinished()) {
            #-----------------------------------------------------#
            #                   TOGGLES                           #
            #-----------------------------------------------------#   
                                    #WARNING: DUAL ENGINES ARE IN THE WORKS!
                Dual_Engines = 0 #Causes the LocoChip to Act like theres 2 Engines. This will Sounds! 
                Idle_Toggle = 0  #This Turns The Low Idle-Idle into a Idle-Notch 1: For Engine Sounds WITH OUT LowIdle!
                    IdleToNotch1 = "up/idle-1.wav" #This is like Low Idle Moving up to Idle.
                    Notch1ToIdle = "down/1-idle.wav" #This is like Idle moving down to Low Idle
                NotchLimit = 8 #This Controls the Notch Limit, It should ONLY be touched if there is more then 14 notches
                WheelNoises = 1 #This Adds Wheel Sounds such as Traction Motors and Braking Noises. (WIP)

            #-----------------------------------------------------#
            #                   DOWNFORCE                         #
            #-----------------------------------------------------#
            Downforce_Toggle = 1
            Downforce_Max = 500
            Downforce_Apply = "both" # "both" | "bogies" | "driver"
            Downforce_SpeedMin = 150
            Downforce_SpeedMax - 2347 * (50/100)

            #-----------------------------------------------------#
            #                   Sound                             #
            #-----------------------------------------------------#
                #This is the Engine SoundPath. You will Need to Edit Sound_EngineSoundPath, Enginepath_Start,
                #Enginepath_ShutdownHigh,AND EnginePath_ShutdownLow to have a working experience!
            Sound_EngineSoundPath = "wam98_sounds/trains/engines/emd645e3cv16/"
                Enginepath_Start = "/startup_high.wav"
                Enginepath_ShutdownHigh = "/shutdown_high.wav"
                Enginepath_ShutdownLow = "/shutdown_low.wav"
                 Engine_TractionMotors = "gsgtrainsounds/wheels/emd_dr77_traction.wav"
                Sound_EngineLevel = 75
            Sound_Toggle_HighIdle = 0
            Sound_SoundHandbrakeOn = "gsgtrainsounds/misc/airbrakes/air_train_apply.wav"
            Sound_SoundHandbrakeOff = "gsgtrainsounds/misc/airbrakes/air_train_release.wav"
            SoundDSP_Enable = 0
                SoundDSP_DistantLevel = 100
                SoundDSP_DistantDSP = 4

#-----------------------------------------------------------------------------------------------#
#                               KERNEL AREA                                                     #
#-----------------------------------------------------------------------------------------------#
            Kernel_E2_Interval = 30
            
            Kernel_Multiplier = 1.0
            Kernel_MaxSpeed = 2347 * (65/100)
            Kernel_Physprop_Brake = "friction_25"
            Kernel_PhysProp_NoBrake = "friction_00"
            Kernel_DeadZoneSize = 4
            Kernel_ThrottlingUp = 0.5
            Kernel_UnitScale = "world"
            Kernel_Force = "entity"
            Kernel_NotchThresholds = array(
            1,  
            15,
            30,
            40,
            55,
            70,
            85,
            95,
            96,
            97,
            98, 
            99,
            100,
            101
        )
        Kernel_Bogie = 1
#-----------------------------------------------------------------------------------------------#
#                               BSD_ROOT                                                        #
#-----------------------------------------------------------------------------------------------#        
                
  CHIP = entity()

    
    BSD_EntityCache = 0
    BSD_PermaActive = 1
    BSD_EngineProcedures = 1
        BSD_HighIdleMin = 70
        BSD_HighIdleMax = 110
    BSD_FrontBogey_Physprop = Kernel_Physprop_Brake
    BSD_RearBogey_Physprop = Kernel_Physprop_Brake
    BSD_EngineStatus = 0
    BSD_EngineHighIdle = 0
    BSD_ReverserCache = 0
    BSD_Notch = 0
    BSD_ScaleSpeed = Kernel_UnitScale == "player" ? 1.33333333333 : 1
    BSD_ReturnReceive = 0
    BSD_Reverser = 0
    BSD_Throttle = 0
    BSD_WorldUp = vec(0,0,1)
#-----------------------------------------------------------------------------------------------#
#                               Sound Indi                                                      #
#-----------------------------------------------------------------------------------------------#    
    SND_SOUND_ENGINE = 1
    SND_SOUND_DISTANT_ENGINE = 3
    SND_REVERSER = 5
    SND_HANDBRAKE_FRONT = 7
    SND_HANDBRAKE_REAR = 9
    SPS_WheelSounds_Front = 11
    SPS_WheelSounds_Rear = 13
    
    SND_FRONT_BOGEY = 0
    SND_REAR_BOGEY = 1
    SND_ENGINE_HOLO = 2
#-----------------------------------------------------------------------------------------------#
#                               Misc Item                                                       #
#-----------------------------------------------------------------------------------------------#    
 #Outputs
    E2_Downforce = 0
    E2_Downforce = (Downforce_Toggle != 0) * Downforce_Max
    UPS = 0
    MPH = 0
    KPH = 0
    Throttle = 0
    Handbrake = 1
    HighIdling = 0
    Notch = 0
    Reverser = 0
    Chip_CPUusage = 0
    UPS_MAX = Kernel_MaxSpeed
    MPH_MAX = round(Kernel_MaxSpeed * 0.04261363636 * BSD_ScaleSpeed)
    KPH_MAX = round(Kernel_MaxSpeed * 0.06857386363 * BSD_ScaleSpeed)
    
    #DeadZone
    Kernel_DeadZoneSize = abs(Kernel_DeadZoneSize)
    
    #Misc
    A = CHIP:getAlpha()
    CHIP:setColor(vec4(200,0,0, A))
    
     
    
    #SND Holo Post      
    holoCreate(SND_ENGINE_HOLO)
    holoModel(SND_ENGINE_HOLO, "models/sprops/misc/axis_plane.mdl")
    holoPos(SND_ENGINE_HOLO, CHIP:toWorld(vec(0,0,0)))
    holoAng(SND_ENGINE_HOLO, CHIP:angles())
    holoParent(SND_ENGINE_HOLO, CHIP)
    holoAlpha(SND_ENGINE_HOLO, 0)
    SND_ENT_ENGINE = holoEntity(SND_ENGINE_HOLO)
        
        interval(Kernel_E2_Interval)
        
      #Version Check
    
    #Overall Version Check
    runOnHTTP(1)
    httpRequest("https://github.com/Qulizznos/Locomotive.-Engine.-Chip./blob/main/version.txt")
    timer("vc_timeout",5000)
     
} else {
    
UPS = BSD_Locomotive ? BSD_Locomotive:vel():length() : 0
MPH = round(UPS * 0.04261363636 * BSD_ScaleSpeed)
KPH = round(UPS * 0.06857386363 * BSD_ScaleSpeed)
}
#-----------------------------------------------------------------------------------------------#
#                               E2_KERNEL                                                       #
#-----------------------------------------------------------------------------------------------#
#DO NOT MESS WITH THE CODE!
##########################################################################
#                                                                        #
#                                                                        #
#                       LOCOMOTIVE FUNCTIONS                             #
#                                                                        #
#                                                                        #
##########################################################################
 function number state_getCurrentNotch() {
    if (Throttle == 0) {
        return 0
    }
    
    local LastNotch = 0
    
    for (I=1, Kernel_NotchThresholds:count()) {
        local SpeedThreshold = Kernel_NotchThresholds[I,number]
        if (abs(Throttle) < SpeedThreshold) {
            return I - 1
        }
    }
    
    return NotchLimit
}

function void sound_startNotchTransition(ForceTransitionSound:string) {
    if (BSD_EngineStatus != 2) { return }
    local CurNotch = state_getCurrentNotch()
    
    local TransitionSound = ForceTransitionSound
    
    if (TransitionSound == "") {
        if(Idle_Toggle == 1){
            if ((Reverser != BSD_Reverser) & (CurNotch == 0) & !BSD_EngineHighIdle) {
            TransitionSound = HighIdling ? Notch1ToIdle : IdleToNotch1
        } elseif (CurNotch != BSD_Notch) {
            if (CurNotch + BSD_Notch > 1) {
                local Direction = CurNotch > BSD_Notch ? "up" : "down"
                TransitionSound = format("%s/%d-%db.wav", Direction, BSD_Notch, CurNotch)
            } elseif (!HighIdling) {
                TransitionSound = CurNotch == 0 ? Notch1ToIdle : IdleToNotch1
            }
        }
            
        }else{
            if ((Reverser != BSD_Reverser) & (CurNotch == 0) & !BSD_EngineHighIdle) {
            TransitionSound = HighIdling ? "down/idle-idle_low.wav" : "up/idle_low-idle.wav"
        } elseif (CurNotch != BSD_Notch) {
            if (CurNotch + BSD_Notch > 1) {
                local Direction = CurNotch > BSD_Notch ? "up" : "down"
                TransitionSound = format("%s/%d-%db.wav", Direction, BSD_Notch, CurNotch)
            } elseif (!HighIdling) {
                TransitionSound = CurNotch == 0 ? "down/idle-idle_low.wav" : "up/idle_low-idle.wav"
            }
          }
        }
    }

    BSD_Notch = CurNotch
    
    if (TransitionSound != "") {
        local SoundToPlay = format("%s/transitions/%s",Sound_EngineSoundPath, TransitionSound)
        soundStop(SND_SOUND_ENGINE)
        SND_ENT_ENGINE:soundPlay(SND_SOUND_ENGINE, 0, SoundToPlay)
        soundLevel(SND_SOUND_ENGINE, Sound_EngineLevel)
        if (SoundDSP_Enable) {
            soundStop(SND_SOUND_DISTANT_ENGINE)
            entity():soundPlay(SND_SOUND_DISTANT_ENGINE, 0, SoundToPlay)
            soundDSP(SND_SOUND_DISTANT_ENGINE, SoundDSP_DistantDSP)
            soundLevel(SND_SOUND_DISTANT_ENGINE, SoundDSP_DistantLevel)
        }
        stoptimer("ENGINE_TRANSITION")
        timer("ENGINE_TRANSITION", soundDuration(SoundToPlay) * 995)
    }
}

function void holo_cloneBogey(Bogey:entity, Idx:number) {
    holoCreate(Idx)
    holoPos(Idx, Bogey:pos())
    holoAng(Idx, Bogey:angles())
    holoParent(Idx, Bogey)
    
    # Copy basic stuff
    holoModel(Idx, Bogey:model())
    holoColor(Idx, Bogey:getColor4())
    holoSkin(Idx, Bogey:getSkin())
    holoMaterial(Idx, Bogey:getMaterial())
    
    local E = holoEntity(Idx)
    for (I=0,32) {
        local SM = Bogey:getSubMaterial(I)
        if (SM != "") {
            E:setSubMaterial(I, SM)
        }
    }
    
    for (I=0,64) {
        local SubBGCount = Bogey:getBodygroups(I)
        if (SubBGCount > 1) {
            local Choice = Bogey:getBodygroup(I)
            if (Choice != 0) {
                E:setBodygroup(I, Choice)
            }
        }
    }
}

function void state_refreshHighIdle() {
    HighIdling = Button_HighIdle | BSD_EngineHighIdle | (BSD_Reverser != 0)
}
##########################################################################
#                                                                        #
#                                                                        #
#                           LOGIC FUNCTIONS                              #
#                                                                        #
#                                                                        #
##########################################################################
if (clk()) {
    # Basic "Power saving" - run interval less often if engine is off and player is away.
    if (BSD_EngineStatus != 2 && !Active) {
        interval(1000)  
    } else {
        interval(Kernel_E2_Interval)
    }
    
    # Handle normal wire inputs. TODO: handle/send received inputs.
    if (!BSD_ReturnReceive) {
        # Handle the throttle state.
        if (bXor(Pod_Key_ThrottleUp, Pod_Key_ThrottleDown)) {
            local ApplyThrottleAmount = 0
            local ThrotAdd = Kernel_ThrottlingUp
            if (Pod_Key_ThrottleUp) {
                ApplyThrottleAmount = ThrotAdd
            }
            if (Pod_Key_ThrottleDown) {
                ApplyThrottleAmount = -ThrotAdd
            }
            
            # Throttle state will be limited to [-100, 100] plus or minus the CFG_Operation_ThrottleDeadzoneSize.
            # "Throttle" is the "faked" value that is both output and used to calculate force needed.
            local Throttle_DeadzoneSize = BSD_PermaActive ? 1 : Kernel_DeadZoneSize
            local Throttle_Min = (BSD_PermaActive ? 0 : -100) - Throttle_DeadzoneSize
            local Throttle_Max = 100 + Throttle_DeadzoneSize
            BSD_Throttle = max(Throttle_Min, min(BSD_Throttle + ApplyThrottleAmount, Throttle_Max))
            Throttle = floor(sign(BSD_Throttle) * max(0, abs(BSD_Throttle) - Throttle_DeadzoneSize))
            
            if (BSD_EngineStatus == 2) {
                if (!BSD_PermaActive) {
                    local EngineSoundPitch = abs(Throttle) / 2
                    soundPitch(SND_SOUND_ENGINE, 100 + EngineSoundPitch)
                } else {
                    sound_startNotchTransition("")
                }
            }
        }
    }
        
    # Apply movement force to the locomotive.
    # It will try to cache State_ForceEntity if it isn't cached.
    local ForceDirection = (BSD_Reverser || !BSD_PermaActive)
    if (ForceDirection && BSD_EngineStatus == 2 && Throttle != 0) {
        if (!BSD_Locomotive) {
            BSD_Locomotive = Kernel_Force == "weld" ? CHIP:isWeldedTo() : Locomotive_Body
        }
        if (BSD_Locomotive) {
            # vel():length() returns the Units/Sec velocity of the State_ForceEntity entity.
            if (abs(BSD_Locomotive:vel():length()) < Kernel_MaxSpeed * (abs(Throttle) / 100)) { # Speed limit
                local Up = CHIP:up()
                BSD_Locomotive:applyForce(ForceDirection * Up * (Throttle * 5000 * Kernel_Multiplier))
            }
        }
    }
    
    # Downforce things.
    if (BSD_Locomotive) {
        local NewDownforce = 0
        if (Downforce_Toggle & (UPS > Downforce_SpeedMin)) {
            local F = min((UPS - Downforce_SpeedMin) / (Downforce_SpeedMax-Downforce_SpeedMin), 1)
            if (F > 0.0025) {
                Mode = Downforce_Apply
                ApplyForceBogey1 = Mode == "bogies" | Mode == "both"
                ApplyForceBogey2 = ApplyForceBogey1
                ApplyForceDriver = (Mode == "driver") | (
                    (Mode == "both") & 
                    (FrontBogie != BSD_Locomotive) & 
                    (RearBogie != BSD_Locomotive)
                )
                
                NewDownforce = F * Downforce_Max
                local Impulse = vec(0, 0, -E2_Downforce)
                if (Downforce_Split) {
                    Impulse = Impulse / max(1, ApplyForceBogey1 + ApplyForceBogey2 + ApplyForceDriver)
                }
                
                if (ApplyForceBogey1) {
                    FrontBogie:applyForce(Impulse)
                }
                if (ApplyForceBogey2) {
                    RearBogie:applyForce(Impulse)
                }
                if (ApplyForceDriver) {
                    BSD_Locomotive:applyForce(Impulse)
                }
            }
        }
        E2_Downforce = NewDownforce
    } else {
        E2_Downforce = 0
    }
    
    # Format other outputs.
    # Speed values were set at the start of the interval, no need to set them again here.
    # HighIdling was set above for optimization but might have changed further through the main loop.
    Notch = BSD_Notch
    Reverser = BSD_Reverser
    Chip_EngineStatus = BSD_EngineStatus
    NotchXThrottle = 0
    Chip_E2Ops = ops()
    Chip_CPUusage = cpuUsage() * 1000000
    state_refreshHighIdle()
    
    if (BSD_PermaActive && Notch > 0) {
        local LowSetting = 0
        local HighSetting = 100
        if (Notch > 1) {
            LowSetting = Kernel_NotchThresholds[Notch, number]
        }
        if (Notch < NotchLimit) {
            HighSetting = Kernel_NotchThresholds[Notch + 1, number]
        }
        NotchXThrottle = 100 * ((Throttle - LowSetting) / (HighSetting - LowSetting))
    }
}
##########################################################################
#                                                                        #
#                                                                        #
#                           ENGINE TIMERS                                #
#                                                                        #
#                                                                        #
##########################################################################    
  elseif (clkName() != "") {
    local TimerName = clkName()
    local DoPlayEngineLoop = 0

    if (TimerName == "ENGINE_START_FINISH") {
        BSD_EngineStatus = 2
        DoPlayEngineLoop = 1
        BSD_EngineHighIdle = 1
        state_refreshHighIdle()
        local ExitLowIdleDelay_Min = 70 * 1000
        local ExitLowIdleDelay_Max = 110 * 1000
        timer("ENGINE_STARTUP_GO_LOW_IDLE", randint(ExitLowIdleDelay_Min, ExitLowIdleDelay_Max))
    } elseif (TimerName == "ENGINE_SHUTDOWN_FINISH") {
        BSD_EngineStatus = 0
        soundStop(SND_SOUND_ENGINE)
        soundStop(SND_SOUND_ENGINE)
    } elseif (TimerName == "ENGINE_STARTUP_GO_LOW_IDLE") {
        BSD_EngineHighIdle = 0
        state_refreshHighIdle()
        if (state_getCurrentNotch() == 0 & !HighIdling) {
            sound_startNotchTransition("down/idle-idle_low.wav")
        }
    } elseif (TimerName == "ENGINE_TRANSITION") {
        if (BSD_EngineStatus == 2) {
            DoPlayEngineLoop = 1
        }
    }

    if (DoPlayEngineLoop) {
        local CurNotch = state_getCurrentNotch()
        local LoopSound = ""
        if (CurNotch == 0) {
            if(Idle_Toggle == 1){
            LoopSound = format("%s/%s", Sound_EngineSoundPath, HighIdling ? "/notch1.wav" : "/idle.wav")
        }else{
            LoopSound = format("%s/%s", Sound_EngineSoundPath, HighIdling ? "/idle.wav" : "/idle_low.wav")
        }
        } else {
            LoopSound = format("%s/notch%d.wav", Sound_EngineSoundPath, CurNotch)
        }
        soundStop(SND_SOUND_ENGINE)
        SND_ENT_ENGINE:soundPlay(SND_SOUND_ENGINE, 0, LoopSound)
        soundLevel(SND_SOUND_ENGINE, Sound_EngineLevel)
        if (SoundDSP_Enable) {
                soundStop(SND_SOUND_DISTANT_ENGINE)
                entity():soundPlay(SND_SOUND_DISTANT_ENGINE, 0, LoopSound)
                soundLevel(SND_SOUND_DISTANT_ENGINE, SoundDSP_DistantLevel)
                soundDSP(SND_SOUND_DISTANT_ENGINE, SoundDSP_DistantDSP)
            }
    }
    #WARNING: Work In Progress Code!~
    
    if(WheelNoises == 1){
    if(Throttle > 0){
        ThrottleYes = 1
    }else{
        ThrottleYes = 0
    }
    if(UPS > 0){
        SpeedYes = 1
    }else{
        SpeedYes = 0
    }
   local Motion = (ThrottleYes == 1) & (SpeedYes == 1)
    if((Throttle == 0) | (UPS == 0)){
        soundStop(11)
        soundStop(13)
        Motion == 0
    }
   local TractionMotors = Motion ? Engine_TractionMotors : ""

            FrontBogie:soundPlay(SPS_WheelSounds_Front, 0, TractionMotors)
            soundLevel(SPS_WheelSounds_Front, 54)
            RearBogie:soundPlay(SPS_WheelSounds_Rear, 0, TractionMotors)
            soundLevel(SPS_WheelSounds_Rear, 54)
}
}
##########################################################################
#                                                                        #
#                                                                        #
#                           Variable Triggers                            #
#                                                                        #
#                                                                        #
##########################################################################     
elseif (!clk()) {
    # Safety switch should either be unwired, or wired and engaged, to handle control input.
    if ((!->Button_ControlIsolation) | (Button_ControlIsolation == 1)) {

        # Reverser logic. Should be bound to a non-toggle 1/0 input for both _Forward and _Back.
        if (BSD_PermaActive & (~Pod_Key_Reverser_Forward | ~Pod_Key_Reverser_Backwards)) {
            local Old_State_Reverser = BSD_Reverser
            BSD_Reverser = max(-1, min(BSD_Reverser + Pod_Key_Reverser_Forward - Pod_Key_Reverser_Backwards, 1))
            if (BSD_Reverser != Old_State_Reverser) {
                sound_startNotchTransition("") # reverser will affect high vs low idle
            }
        }
        
        elseif (BSD_PermaActive & ~Button_EngineStartShutdown & (BSD_EngineStatus % 2 == 0)) {
            # This is where we need to start/stop the engine depending on State_EngineMoment.
            # State_EngineMoment == 0 : Engine is off
            # State_EngineMoment == 1 : Engine is starting up
            # State_EngineMoment == 2 : Engine is running
            # State_EngineMoment == 3 : Engine is shutting down
            BSD_EngineStatus = (BSD_EngineStatus + 1) % 4
    
            local SoundPath = ""
            local TimerName = ""
    
            if (BSD_EngineStatus == 1) {
                SoundPath = Sound_EngineSoundPath + Enginepath_Start
                TimerName = "ENGINE_START_FINISH"
            } elseif (BSD_EngineStatus == 3) {
                stoptimer("ENGINE_TRANSITION")
                soundStop(SND_SOUND_ENGINE, 0)
                if(Idle_Toggle == 1){  
                SoundPath = Sound_EngineSoundPath + (HighIdling ? Enginepath_ShutdownHigh : Enginepath_ShutdownHigh)
            }else{
                SoundPath = Sound_EngineSoundPath + (HighIdling ? Enginepath_ShutdownHigh : Enginepath_ShutdownLow)
            }
                TimerName = "ENGINE_SHUTDOWN_FINISH"
            }
            
            soundStop(SND_SOUND_ENGINE)
            SND_ENT_ENGINE:soundPlay(SND_SOUND_ENGINE, 0, SoundPath)
            soundLevel(SND_SOUND_ENGINE, Sound_EngineLevel)
            if (SoundDSP_Enable) {
                soundStop(SND_SOUND_DISTANT_ENGINE)
                entity():soundPlay(SND_SOUND_DISTANT_ENGINE, 0, SoundPath)
                soundLevel(SND_SOUND_DISTANT_ENGINE, SoundDSP_DistantLevel)
                soundDSP(SND_SOUND_DISTANT_ENGINE, SoundDSP_DistantDSP)
            }
            timer(TimerName, soundDuration(SoundPath) * 1000)
        }
    }

    # Soft-toggle the handbrake (input is a keyboard key/non-toggle)
    # Also toggle on if the bogies are rewired
    # Also redo the bogey holo if CFG_Holo_Bogies is 1
    local BogiesRewired = ~FrontBogie | ~RearBogie
    if (BogiesRewired | (~Pod_Key_Handbrake & Pod_Key_Handbrake)) {
        Handbrake = BogiesRewired | (Handbrake ? 0 : 1)
        local SoundToPlay = Handbrake ? Sound_SoundHandbrakeOn : Sound_SoundHandbrakeOff
        local PhysPropToApply = Handbrake ? Kernel_Physprop_Brake : Kernel_PhysProp_NoBrake
        if (->FrontBogie) {
            FrontBogie:soundPlay(SND_HANDBRAKE_FRONT, 0, SoundToPlay)
            FrontBogie:propPhysicalMaterial(PhysPropToApply)
            holo_cloneBogey(FrontBogie, SND_FRONT_BOGEY)
        }
        if (->RearBogie) {
            RearBogie:soundPlay(SND_HANDBRAKE_REAR, 0, SoundToPlay)
            RearBogie:propPhysicalMaterial(PhysPropToApply)
            holo_cloneBogey(RearBogie, SND_HANDBRAKE_REAR)
        }
    }
    
    # What happens when the player gets in or out of the "Active" seat when _DoEngineStartProcedures is off?
    # (We make it behave like OLC)
    if (~Active & !BSD_EngineProcedures) {
        if (Active) {
            BSD_EngineStatus = 2
            soundStop(SND_SOUND_ENGINE, 0)
            SND_ENT_ENGINE:soundPlay(SND_SOUND_ENGINE, 0, "")
            soundPitch(SND_SOUND_ENGINE, 100 + abs(Throttle) / 2)
        } else {
            BSD_EngineStatus = 0
            soundStop(SND_SOUND_ENGINE, 0)
        }
    }
}

 elseif (first() | dupefinished()) {
    # Holo the bogies on.
    if (Kernel_Bogie) {
        if (FrontBogie) {
            holo_cloneBogey(FrontBogie, SND_FRONT_BOGEY)
        }
        if (RearBogie) {
            holo_cloneBogey(RearBogie, SND_REAR_BOGEY)
        }
    }
}           


#########VERSION CHECKER
if(clk("vc_timeout")){
    runOnHTTP(0)
    print("ERROR: L.E.C was Unable to Contact Github. Version Unknown!")
    setName("L.E.C" + "\n Locomotive Engine Chip " + "\n Version: " +Version + "\n UNABLE TO CONTACT GITHUB")
    
}elseif(httpClk()){
    runOnHTTP(0)
    stoptimer("vc_timeout")
    local MasterVersion = httpData()
    local MVA = MasterVersion:explode(".")
    local MV_Major = MVA[2,string]
    local MV_Minor = MVA[3,string]
    
    local VA = Version:explode(".")
    local V_Major = VA[2,string]
    local V_Minor = VA[3,string]
    
    local Version_Checker = (MV_Major:toNumber() < V_Major:toNumber()) | (V_Minor:toNumber() > MV_Minor:toNumber())
    
    if(Version_Checker){
       
        printColor(vec(127,255,127),"Notice! L.E.C Version is Out of Date! You Can Pick up a New Version at: https://github.com/Qulizznos/Locomotive.-Engine.-Chip.")
         setName("L.E.C" + "\n Locomotive Engine Chip " + "\n Version: " +Version + "\n E2 OUT OF DATE PLEASE GET NEW VERSION")
        
    }else{
        
        #soundVolume(0,0.5)
        print("L.E.C Version is Sucessfully on Recent Version.")
        setName("L.E.C" + "\n Locomotive Engine Chip " + "\n Version: " +Version )
    }
}
